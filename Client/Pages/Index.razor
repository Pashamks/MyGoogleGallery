@page "/"
@using System.Globalization
@using Radzen
@inject HttpClient Http
@using System.Text.Json
<style>
    body {
       
        background-size: 100% 100%;
    }
    .main-text {
        color: black;
        text-align: center;
        margin-bottom: 2%;
    }
    .image{
        max-height: 250px;
        max-width: 250px;
        min-height: 150px;
        min-width: 150px;
    }

</style>
<h1 class="main-text">Welcome to my Furniture Shop!</h1>

<div class="row col-12">
    <div class="col col-6">
        <h2 class="main-text">The most popular furniture:</h2>
        <div class="row  d-flex justify-content-center mb-3">
            <div class="mr-4">
                <img src="@PopularImages[0]" class="image"/>
            </div>
            <div>
                <img src="@PopularImages[1]" class="image"/>
            </div>
        </div>
        <div class="row  d-flex justify-content-center">
            <div class="mr-4">
                <img src="@PopularImages[2]" class="image"/>
            </div>
            <div>
                <img src="@PopularImages[3]" class="image"/>
            </div>
        </div>
    </div>
    <div class="col-6">
        <h2 class="main-text">Furniture statistic:</h2>
        <div class="container">
            <div class="row d-flex justify-content-center">
                <div >
                    <RadzenChart Style="color: black;">
                        <RadzenPieSeries Data="@revenue" Title="Revenue" CategoryProperty="PhotoName" ValueProperty="SearchingAmount" />
                    </RadzenChart>
                </div>
            </div>
        </div>
    </div>
    
</div>


@code{
    List<string> PopularImages = new List<string> { "","","","" };
    List<DataItem> revenue;
    protected async Task GetChartData()
    {
        var res = await Http.GetAsync($"https://localhost:5001/api/UserPhoto/get_chart_data");
        var mydictionary = JsonSerializer.Deserialize<Dictionary<string, int>>(res.Content.ReadAsStringAsync().Result);
        revenue = mydictionary.Select(x => new DataItem { PhotoName = x.Key, SearchingAmount = x.Value}).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetChartData();
        await GetPopilarImages();
    }
    protected async Task GetPopilarImages()
    {
        var res = await Http.GetAsync($"https://localhost:5001/api/UserPhoto/get_photos");
        var mylist = JsonSerializer.Deserialize<List<MyUserPhoto>>(res.Content.ReadAsStringAsync().Result);

        mylist.Sort((x,y) => y.searchingCounter-x.searchingCounter);

        PopularImages = mylist.Select(x=>x.photoUrl).Take(4).ToList();
    }

    class DataItem
    {
        public string PhotoName { get; set; }
        public int SearchingAmount { get; set; }
    }

    class MyUserPhoto
    {
        public string photoUrl { get; set; }
        public string photoType { get; set; }
        public int searchingCounter { get; set; }
    }

}

